name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Releasing version: $VERSION"
        echo "Is prerelease: ${{ steps.version.outputs.is_prerelease }}"
    
    - name: Validate version format
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: vMAJOR.MINOR.PATCH[PRERELEASE]"
          exit 1
        fi

  build-and-test:
    needs: validate-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run full test suite
      run: |
        pytest --cov=src --cov-report=term-missing --cov-fail-under=80 -v
    
    - name: Run security checks
      run: |
        bandit -r src/ -f json
        safety check
    
    - name: Build package
      run: |
        python -m build
    
    - name: Verify build
      run: |
        pip install dist/*.whl
        smart --version
        smart --help

  create-release:
    needs: [validate-release, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build package
      run: python -m build
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        VERSION=${{ needs.validate-release.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        
        # Get changelog section between version headers
        CHANGELOG=$(awk "/^## \[$VERSION_NO_V\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "No changelog found for $VERSION")
        
        # Save to file for GitHub release
        echo "$CHANGELOG" > release_notes.txt
        
        echo "Generated changelog for $VERSION"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release_notes.txt
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
    
    - name: Publish to TestPyPI (for prereleases)
      if: needs.validate-release.outputs.is_prerelease == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository_url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  docker-release:
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: smartcli/smart-cli
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    needs: [validate-release, create-release, docker-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Release Success Notification
      if: needs.create-release.result == 'success'
      run: |
        echo "<‰ Release ${{ needs.validate-release.outputs.version }} completed successfully!"
        echo "=æ Package published to PyPI"
        echo "=3 Docker image pushed to Docker Hub"
        echo "=Ë GitHub release created with changelog"
    
    - name: Release Failure Notification
      if: needs.create-release.result == 'failure'
      run: |
        echo "L Release ${{ needs.validate-release.outputs.version }} failed!"
        echo "Please check the logs and try again."
        exit 1