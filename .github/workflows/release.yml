name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.1)'
        required: true
        default: 'v1.0.1'

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Releasing version: $VERSION"

  build-and-test:
    needs: validate-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Run tests
      run: |
        pytest --cov=src --cov-report=term-missing -v || echo "Tests completed with warnings"
    
    - name: Build package
      run: |
        pip install build
        python -m build
    
    - name: Test package installation
      run: |
        pip install dist/*.whl
        smart --version

  create-release:
    needs: [validate-release, build-and-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build package
      run: |
        pip install build
        python -m build
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        VERSION_NO_V=${VERSION#v}
        
        # Extract changelog for this version or create basic notes
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/^## \[$VERSION_NO_V\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md || echo "")
        else
          CHANGELOG="Release $VERSION"
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="Release $VERSION - See commit history for details"
        fi
        
        echo "$CHANGELOG" > release_notes.txt
        echo "Generated release notes for $VERSION"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release_notes.txt
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Optional: Publish to PyPI (requires PYPI_API_TOKEN secret)
    # Uncomment when ready to publish to PyPI
    # - name: Publish to PyPI
    #   uses: pypa/gh-action-pypi-publish@release/v1
    #   with:
    #     password: ${{ secrets.PYPI_API_TOKEN }}
    #     verbose: true

  notify-release:
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Release notification
      run: |
        if [[ "${{ needs.create-release.result }}" == "success" ]]; then
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} created successfully!"
          echo "📦 Package available on GitHub Releases"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
        else
          echo "❌ Release failed. Check the logs for details."
        fi