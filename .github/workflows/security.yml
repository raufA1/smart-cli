name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  dependency-security:
    runs-on: ubuntu-latest
    name: Dependency Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit bandit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc || true
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json
        retention-days: 30

  code-security:
    runs-on: ubuntu-latest
    name: Code Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Bandit
      run: pip install bandit[toml]
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt || true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 30

  secrets-detection:
    runs-on: ubuntu-latest
    name: Secrets Detection
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install detect-secrets
      run: pip install detect-secrets
    
    - name: Run detect-secrets scan
      run: |
        detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins
        detect-secrets audit .secrets.baseline || true
    
    - name: Check for new secrets
      run: |
        detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins > new-secrets.json || true
        if [ -s new-secrets.json ]; then
          echo "=¨ New secrets detected!"
          cat new-secrets.json
          exit 1
        else
          echo " No new secrets detected"
        fi

  semgrep-sast:
    runs-on: ubuntu-latest
    name: Static Application Security Testing (SAST)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/owasp-top-ten
          p/cwe-top-25
        generateSarif: "1"
        auditOn: push
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: Upload SARIF file to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()

  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=table
    
    - name: Verify license compatibility
      run: |
        # Check for GPL licenses that might conflict with MIT
        if pip-licenses --format=json | jq -r '.[].License' | grep -i gpl; then
          echo "   GPL licenses detected. Please review for compatibility."
        else
          echo " No GPL licenses detected"
        fi
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json
        retention-days: 30

  container-security:
    runs-on: ubuntu-latest
    name: Container Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t smart-cli:security-scan .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'smart-cli:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-results.json'
    
    - name: Upload filesystem scan results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-filesystem-results
        path: trivy-fs-results.json
        retention-days: 30

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-security, code-security, secrets-detection, semgrep-sast, license-check, container-security]
    if: always()
    name: Security Summary
    
    steps:
    - name: Security scan completed
      run: |
        echo "## = Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.dependency-security.result }}" == "success" ]]; then
          echo " Dependency Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L Dependency Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.code-security.result }}" == "success" ]]; then
          echo " Code Security (Bandit): PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L Code Security (Bandit): FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.secrets-detection.result }}" == "success" ]]; then
          echo " Secrets Detection: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L Secrets Detection: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.semgrep-sast.result }}" == "success" ]]; then
          echo " SAST (Semgrep): PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L SAST (Semgrep): FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.license-check.result }}" == "success" ]]; then
          echo " License Check: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L License Check: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.container-security.result }}" == "success" ]]; then
          echo " Container Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "L Container Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "=Ê All security scan artifacts are available in the Actions tab." >> $GITHUB_STEP_SUMMARY