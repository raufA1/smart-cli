[tool:pytest]
# Smart CLI Professional Testing Configuration

# Test discovery and execution
minversion = 6.0
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Output and reporting options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --cov-branch
    --junitxml=junit.xml
    --maxfail=5
    --durations=10

# Test markers for categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests across components
    e2e: End-to-end functional tests
    performance: Performance and benchmark tests
    security: Security-focused tests
    slow: Tests that take longer to execute
    network: Tests requiring network access
    ai: Tests involving AI service calls
    mode_system: Tests for Enhanced Mode System
    orchestrator: Tests for multi-agent orchestration
    config: Configuration-related tests
    handlers: Request handler tests
    agents: AI agent tests
    utils: Utility function tests

# Coverage configuration
[coverage:run]
source = src
branch = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */virtualenv/*
    */.venv/*
    */site-packages/*
    setup.py
    conftest.py
    */conftest.py

[coverage:report]
exclude_lines =
    # Standard exclusions
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    
    # Debug and logging
    logger.debug
    logger.trace
    if self.debug:
    if DEBUG:
    
    # Type checking
    if TYPE_CHECKING:
    @overload
    
    # Abstract methods
    @abstractmethod
    
    # Error handling
    except ImportError:
    except ModuleNotFoundError:
    
    # Platform-specific code
    if sys.platform
    if platform.system

# Show missing line numbers in coverage report
show_missing = true
skip_covered = false
precision = 2

[coverage:html]
directory = htmlcov
title = Smart CLI Coverage Report

[coverage:xml]
output = coverage.xml