"""Smart CLI Simple Project Generator - Essential templates only."""

import json
import os
from datetime import datetime
from typing import Dict, Optional


class SimpleProjectGenerator:
    """Minimal project generation with essential templates only."""

    def __init__(self):
        # Removed deprecated UI manager dependency
        pass

    async def create_project(self, template_name: str, project_name: str) -> bool:
        """Create project with essential templates only."""

        templates = {
            "fastapi": self._create_fastapi_project,
            "react": self._create_react_project,
            "python": self._create_simple_python_project,
        }

        if template_name not in templates:
            if self.ui_manager:
                self.ui_manager.display_error(
                    f"Template '{template_name}' not found. Available: fastapi, react, python"
                )
            return False

        # Create project directory
        project_path = os.path.join(os.getcwd(), project_name)
        if os.path.exists(project_path):
            if self.ui_manager:
                self.ui_manager.display_error(
                    f"Directory '{project_name}' already exists"
                )
            return False

        try:
            os.makedirs(project_path)
            success = await templates[template_name](project_path, project_name)

            if success and self.ui_manager:
                self.ui_manager.display_success(
                    f"âœ… Created {template_name} project: {project_name}"
                )

            return success

        except Exception as e:
            if self.ui_manager:
                self.ui_manager.display_error("Project creation failed", str(e))
            return False

    async def _create_fastapi_project(
        self, project_path: str, project_name: str
    ) -> bool:
        """Create minimal FastAPI project."""

        # main.py
        main_py = (
            '''from fastapi import FastAPI

app = FastAPI(title="'''
            + project_name.replace("-", " ").title()
            + """")

@app.get("/")
def read_root():
    return {"message": "Hello from """
            + project_name
            + """"}

@app.get("/health")
def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
"""
        )

        # requirements.txt
        requirements = """fastapi==0.104.1
uvicorn[standard]==0.24.0
python-dotenv==1.0.0
"""

        # README.md
        readme = f"""# {project_name.replace('-', ' ').title()}

FastAPI project generated by Smart CLI.

## Setup

```bash
pip install -r requirements.txt
python main.py
```

Visit: http://localhost:8000
"""

        files = {
            "main.py": main_py,
            "requirements.txt": requirements,
            "README.md": readme,
            ".gitignore": "__pycache__/\n*.pyc\n.env\nvenv/\n",
        }

        for filename, content in files.items():
            with open(os.path.join(project_path, filename), "w") as f:
                f.write(content)

        return True

    async def _create_react_project(self, project_path: str, project_name: str) -> bool:
        """Create minimal React project."""

        package_json = f"""{{
  "name": "{project_name}",
  "version": "1.0.0",
  "scripts": {{
    "dev": "vite",
    "build": "vite build"
  }},
  "dependencies": {{
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }},
  "devDependencies": {{
    "@vitejs/plugin-react": "^4.1.1",
    "vite": "^4.5.0"
  }}
}}"""

        vite_config = """import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: { port: 3000 }
})
"""

        index_html = f"""<!DOCTYPE html>
<html>
<head>
  <title>{project_name.replace('-', ' ').title()}</title>
</head>
<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>
</html>
"""

        main_jsx = (
            """import React from 'react'
import ReactDOM from 'react-dom/client'

function App() {
  return <h1>Welcome to """
            + project_name
            + """!</h1>
}

ReactDOM.createRoot(document.getElementById('root')).render(<App />)
"""
        )

        readme = f"""# {project_name.replace('-', ' ').title()}

React project generated by Smart CLI.

## Setup

```bash
npm install
npm run dev
```

Visit: http://localhost:3000
"""

        files = {
            "package.json": package_json,
            "vite.config.js": vite_config,
            "index.html": index_html,
            "src/main.jsx": main_jsx,
            "README.md": readme,
        }

        # Create directories
        os.makedirs(os.path.join(project_path, "src"), exist_ok=True)

        for filename, content in files.items():
            file_path = os.path.join(project_path, filename)
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, "w") as f:
                f.write(content)

        return True

    async def _create_simple_python_project(
        self, project_path: str, project_name: str
    ) -> bool:
        """Create simple Python project."""

        main_py = f'''#!/usr/bin/env python3
"""
{project_name.replace('-', ' ').title()} - Generated by Smart CLI
"""

def main():
    print("Hello from {project_name}!")

if __name__ == "__main__":
    main()
'''

        files = {
            "main.py": main_py,
            "requirements.txt": "# Add your dependencies here\n",
            "README.md": f"# {project_name.replace('-', ' ').title()}\n\nPython project generated by Smart CLI.\n",
            ".gitignore": "__pycache__/\n*.pyc\n.env\nvenv/\n",
        }

        for filename, content in files.items():
            with open(os.path.join(project_path, filename), "w") as f:
                f.write(content)

        return True

    def list_templates(self) -> list:
        """List available templates."""
        return ["fastapi", "react", "python"]
