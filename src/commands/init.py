"""Project initialization commands."""

import typer
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.progress import Progress, SpinnerColumn, TextColumn
from pathlib import Path
import os
import shutil
from typing import Optional

console = Console()
init_app = typer.Typer()


@init_app.command()
def project(
    name: str = typer.Argument(..., help="Project name"),
    template: str = typer.Option("python", "--template", "-t", help="Project template (python, node, react, etc.)"),
    directory: Optional[str] = typer.Option(None, "--dir", "-d", help="Target directory"),
):
    """Initialize a new project with Smart CLI."""
    
    # Determine target directory
    target_dir = Path(directory) if directory else Path.cwd() / name
    
    if target_dir.exists() and any(target_dir.iterdir()):
        if not Confirm.ask(f"Directory {target_dir} already exists and is not empty. Continue?"):
            console.print("‚ùå Project initialization cancelled.", style="red")
            raise typer.Exit(1)
    
    # Create directory if it doesn't exist
    target_dir.mkdir(parents=True, exist_ok=True)
    
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        
        task = progress.add_task("Initializing project...", total=None)
        
        # Initialize based on template
        if template == "python":
            _init_python_project(target_dir, name, progress, task)
        elif template == "node":
            _init_node_project(target_dir, name, progress, task)
        elif template == "react":
            _init_react_project(target_dir, name, progress, task)
        else:
            console.print(f"‚ùå Unknown template: {template}", style="red")
            raise typer.Exit(1)
        
        progress.update(task, description="Project initialized successfully!")
    
    console.print(f"‚úÖ Project '{name}' initialized successfully!", style="green")
    console.print(f"üìÅ Location: {target_dir.absolute()}", style="blue")
    
    # Show next steps
    console.print("\nüöÄ Next steps:", style="bold yellow")
    console.print(f"   cd {target_dir.name}")
    if template == "python":
        console.print("   pip install -r requirements.txt")
        console.print("   python -m pytest tests/")
    elif template in ["node", "react"]:
        console.print("   npm install")
        console.print("   npm test")


def _init_python_project(target_dir: Path, name: str, progress, task):
    """Initialize Python project structure."""
    progress.update(task, description="Creating Python project structure...")
    
    # Create directory structure
    dirs_to_create = [
        f"{name}",
        f"{name}/tests",
        f"{name}/docs",
        f"{name}/{name.replace('-', '_')}",
    ]
    
    for dir_name in dirs_to_create:
        (target_dir / dir_name).mkdir(parents=True, exist_ok=True)
    
    # Create pyproject.toml
    progress.update(task, description="Creating pyproject.toml...")
    pyproject_content = f'''[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{name}"
version = "0.1.0"
description = "A project generated by Smart CLI"
dependencies = [
    "click>=8.1.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
]

[project.scripts]
{name.replace('-', '_')} = "{name.replace('-', '_')}.cli:main"
'''
    
    (target_dir / name / "pyproject.toml").write_text(pyproject_content)
    
    # Create main module
    progress.update(task, description="Creating main module...")
    main_module = f'''"""Main module for {name}."""

import typer
from rich.console import Console

console = Console()
app = typer.Typer()


@app.command()
def hello(name: str = "World"):
    """Say hello."""
    console.print(f"Hello {{name}}!", style="green")


def main():
    """Main entry point."""
    app()


if __name__ == "__main__":
    main()
'''
    
    (target_dir / name / name.replace('-', '_') / "__init__.py").write_text("")
    (target_dir / name / name.replace('-', '_') / "cli.py").write_text(main_module)
    
    # Create test file
    progress.update(task, description="Creating test files...")
    test_content = f'''"""Tests for {name}."""

import pytest
from {name.replace('-', '_')}.cli import app
from typer.testing import CliRunner

runner = CliRunner()


def test_hello():
    """Test hello command."""
    result = runner.invoke(app, ["hello", "Test"])
    assert result.exit_code == 0
    assert "Hello Test!" in result.stdout
'''
    
    (target_dir / name / "tests" / "__init__.py").write_text("")
    (target_dir / name / "tests" / "test_cli.py").write_text(test_content)
    
    # Create requirements.txt
    requirements = '''click>=8.1.0
typer>=0.9.0
rich>=13.0.0
pytest>=7.4.0
black>=23.7.0
flake8>=6.0.0
'''
    (target_dir / name / "requirements.txt").write_text(requirements)
    
    # Create README
    readme = f'''# {name}

A project generated by Smart CLI.

## Installation

```bash
pip install -r requirements.txt
```

## Usage

```bash
{name.replace('-', '_')} hello
```

## Development

```bash
pytest tests/
black {name.replace('-', '_')}/
flake8 {name.replace('-', '_')}/
```
'''
    (target_dir / name / "README.md").write_text(readme)


def _init_node_project(target_dir: Path, name: str, progress, task):
    """Initialize Node.js project structure."""
    progress.update(task, description="Creating Node.js project structure...")
    
    # Create directory structure
    dirs_to_create = [
        f"{name}/src",
        f"{name}/test",
        f"{name}/docs",
    ]
    
    for dir_name in dirs_to_create:
        (target_dir / dir_name).mkdir(parents=True, exist_ok=True)
    
    # Create package.json
    progress.update(task, description="Creating package.json...")
    package_json = f'''{{
  "name": "{name}",
  "version": "1.0.0",
  "description": "A project generated by Smart CLI",
  "main": "src/index.js",
  "bin": {{
    "{name}": "./bin/{name}.js"
  }},
  "scripts": {{
    "start": "node src/index.js",
    "test": "jest",
    "lint": "eslint src/"
  }},
  "dependencies": {{
    "commander": "^11.1.0",
    "chalk": "^5.3.0"
  }},
  "devDependencies": {{
    "jest": "^29.7.0",
    "eslint": "^8.50.0"
  }}
}}
'''
    
    (target_dir / name / "package.json").write_text(package_json)
    
    # Create main file
    progress.update(task, description="Creating main file...")
    main_js = f'''const {{ program }} = require('commander');
const chalk = require('chalk');

program
  .name('{name}')
  .description('A CLI generated by Smart CLI')
  .version('1.0.0');

program
  .command('hello')
  .description('Say hello')
  .argument('<name>', 'name to greet')
  .action((name) => {{
    console.log(chalk.green(`Hello ${{name}}!`));
  }});

program.parse();
'''
    
    (target_dir / name / "src" / "index.js").write_text(main_js)


def _init_react_project(target_dir: Path, name: str, progress, task):
    """Initialize React project using create-react-app."""
    progress.update(task, description="Creating React project...")
    
    import subprocess
    
    try:
        subprocess.run([
            "npx", "create-react-app", name
        ], cwd=target_dir, check=True, capture_output=True)
        
        progress.update(task, description="React project created successfully!")
        
    except subprocess.CalledProcessError as e:
        console.print(f"‚ùå Failed to create React project: {e}", style="red")
        raise typer.Exit(1)


if __name__ == "__main__":
    init_app()